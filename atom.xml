<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tickertapetimer.github.io</id>
    <title>A little blog</title>
    <updated>2022-03-11T11:31:38.274Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tickertapetimer.github.io"/>
    <link rel="self" href="https://tickertapetimer.github.io/atom.xml"/>
    <logo>https://tickertapetimer.github.io/images/avatar.png</logo>
    <icon>https://tickertapetimer.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, A little blog</rights>
    <entry>
        <title type="html"><![CDATA[SEH初探]]></title>
        <id>https://tickertapetimer.github.io/post/LeZq9-hzr/</id>
        <link href="https://tickertapetimer.github.io/post/LeZq9-hzr/">
        </link>
        <updated>2022-03-11T09:56:57.000Z</updated>
        <content type="html"><![CDATA[<h2 id="简要">简要</h2>
<p>SEH，也叫结构化异常处理，想要明白这个是什么意思，就需要去知道什么是异常处理。异常处理是指当程序运行出现错误时，系统会执行它自身或者程序设定好的行为，比如说当编写的程序在遇到out of range，或者是空指针等原因时，系统可能会终止程序运行，或者出现错误弹窗，这就是系统对于程序遇到的异常情况的处理。</p>
<p>但当程序遇到上述这些异常时，不一定要执行系统默认的异常处理函数，也可以通过在编写程序时加入自己的异常处理函数，使得程序遇到异常时可以先执行自带的异常处理函数，避免程序因为异常直接被系统“截停”。这在日常开发中经常会被用到，开发者可以用来检测用户的输入是否合法。本文要提到的结构化异常处理则是Windows操作系统提供的强大异常处理功能。而Visual C++中的__try{}/__finally{}和__try{}/__except{}结构本质上是对Windows提供的SEH的封装。</p>
<p>SEH本质上是一个链表，系统为每一个线程都设立一个单独的异常处理帧链表来处理异常事件，结构类似于这样（个人理解）</p>
<pre><code>+---------+         +---------------+
| 发生异常 +--------&gt;+   SEH         +--+
|         |         +---------------+  |            +------------------+
+---------+         |   Handler     +--------------&gt;+  异常处理函数     |
                    +---------------+  |            |  ...             |
                                       |            |  retn            |
                            +----------+            +------------------+
                            |
                    +-------v-------+
                    |   Next        +--+
                    +---------------+  |            +------------------+
                    |   Handler     +--------------&gt;+  异常处理函数     |
                    +---------------+  |            |  ...             |
                                       |            |  retn            |
                            +----------+            +------------------+
                            |
                    +-------v-------+
                    |  FFFFFFh      |
                    +---------------+               +------------------+
                    |   Handler     +--------------&gt;+  异常处理函数     |
                    +---------------+               |  ...             |
                                                    |  retn            |
                                                     +------------------+
</code></pre>
<p>当出现异常时，我们可以通过使用对应异常状态的“筛选器”去进行处理，类似于这样</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;windows.h&gt; // for EXCEPTION_ACCESS_VIOLATION
#include &lt;excpt.h&gt;


int main()
{
    int* p = 0x00000000;   // pointer to NULL
    puts(&quot;hello&quot;);
    __try
    {
        puts(&quot;in try&quot;);
        *p = 13;    // causes an access violation exception;

    }
    __except (EXCEPTION_EXECUTE_HANDLER)
    {
        puts(&quot;in except&quot;);
    }
    puts(&quot;world&quot;);
}
</code></pre>
<p>对空指针赋值导致出现异常，这时 __except ()接收到对应的状态EXCEPTION_EXECUTE_HANDLER，开始执行里面的代码，最终输出结果为</p>
<pre><code>hello
in try
in except
world
</code></pre>
<p>上述为SEH基础知识，SEH还有很多东西可以探究，本文仅仅是一个简单的介绍，实际上SEH还可以用来实现反调试反跟踪等等高端的操作。</p>
<h2 id="奇想">奇想</h2>
<p>既然我们知道异常处理可以在程序碰到异常时执行别的代码，那它配合上代码自解密（SMC），是不是有可能做到将加密代码的密钥隐藏起来，使其不那么容易被发现。例如用随机密码的方式，先用一个密钥将代码段加密起来，比如说选择124作为密钥，加密用最简单的异或，在解密运行代码时，用随机数去解密代码，一旦生成的随机数不是124，那样解密出来的代码就一定无法运行，导致触发异常，用异常处理去重新生成密钥，不断的随机，直到生成原来的密钥，这样理论上可以大大降低密钥被发现进而导致代码段被解密所带来的风险，甚至可以在代码段解密成功运行后，用随机数异或回去，这样每一次调试所需要的密钥都是不一样的，进一步降低风险。</p>
<h3 id="具体实现">具体实现</h3>
<p>说干就干，写了个demo去测试这种想法</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;windows.h&gt;
#include &lt;excpt.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;

#pragma code_seg(&quot;.ddd&quot;)
void D()
{
	puts(&quot;WIN&quot;);
}
void A()
{
	;
}
#pragma code_seg()
#pragma comment(linker, &quot;/SECTION:.ddd,ERW&quot;)

void flag(int key)
{
	char* b1 = (char*)D;
	char* c1 = (char*)A;
	int i = 0;
	for (; b1 &lt; c1; b1++)
	{
		i++;
	}
	void* a1 = (char*)D;
	for (int i = 0; i &lt; 32; i++)
	{
		*((BYTE*)a1 + i) ^= key;
	}
	D();
}

int main1(int key)
{
	int i, n;
	void* a1 = (char*)D;
	key = rand() % 200;
	__try
	{
		flag(key);
	}
	__except (EXCEPTION_EXECUTE_HANDLER)
	{
		for (int i = 0; i &lt; 32; i++)
		{
			*((BYTE*)a1 + i) ^= key;
		}
		main1(key,);
	}
	system(&quot;PAUSE&quot;);
	return num;
}

int main()
{
	int key = 0;
	time_t t;
	srand(time(&amp;t));
	main1(key,);
	system(&quot;PAUSE&quot;);
}
</code></pre>
<p>从demo中不难看出，唯有key值随机到0时，才能正常运行程序。</p>
<h2 id="问题">问题</h2>
<p>在运行demo时，遇到了一些问题，对于某些随机出来的key，在和代码段异或后执行该代码段时，程序不会进入异常处理，程序在等待了一段时间后直接关闭了，原因暂时不明，推测可能是使用该key值解密生成的代码段在运行时遇到了非常严重的错误，异常处理无法接管，导致出现错误，无法继续运行。</p>
<h3 id="解决方案">解决方案</h3>
<p>错误是出现在执行代码段时，那如果并不执行代码段，而是在代码段前放一个标识，如果解密后的代码段无法检测到该标识，就将其鉴定为解密失败，强行抛出异常进入异常处理，重新生成密钥。</p>
<p>或者是对代码段做一个CRC校验，判断与原代码段是否相同，两者应该都可以解决该问题。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[壳]]></title>
        <id>https://tickertapetimer.github.io/post/OV4NGVHjF/</id>
        <link href="https://tickertapetimer.github.io/post/OV4NGVHjF/">
        </link>
        <updated>2021-11-29T10:48:49.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>暑假写了一手加壳器，写完发现有bug，后续又因为比赛耽搁修bug了。不过幸好这学期的实验有加壳，让我把它调通了。（其实基本上是重写了）</p>
<h2 id="代码">代码</h2>
<p>代码放在GitHub了<br>
https://github.com/tickertapetimer/pack_ddjsq</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[某PDF阅读器的破解]]></title>
        <id>https://tickertapetimer.github.io/post/nmu4gcKIx/</id>
        <link href="https://tickertapetimer.github.io/post/nmu4gcKIx/">
        </link>
        <updated>2021-10-12T04:03:03.000Z</updated>
        <content type="html"><![CDATA[<h2 id="打开">打开</h2>
<figure data-type="image" tabindex="1"><img src="https://tickertapetimer.github.io/post-images/1646366684661.png" alt="" loading="lazy"></figure>
<h2 id="vip功能">VIP功能</h2>
<p>搜索Registered，找到get_IsRegistered</p>
<figure data-type="image" tabindex="2"><img src="https://tickertapetimer.github.io/post-images/1646366723914.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://tickertapetimer.github.io/post-images/1646366730157.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://tickertapetimer.github.io/post-images/1646366735126.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://tickertapetimer.github.io/post-images/1646366739097.png" alt="" loading="lazy"></figure>
<p>编辑IL指令</p>
<figure data-type="image" tabindex="6"><img src="https://tickertapetimer.github.io/post-images/1646366751206.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://tickertapetimer.github.io/post-images/1646366761188.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="8"><img src="https://tickertapetimer.github.io/post-images/1646366764084.png" alt="" loading="lazy"></figure>
<p>还有一块要修改</p>
<figure data-type="image" tabindex="9"><img src="https://tickertapetimer.github.io/post-images/1646366786996.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="10"><img src="https://tickertapetimer.github.io/post-images/1646366789692.png" alt="" loading="lazy"></figure>
<p>依法炮制</p>
<figure data-type="image" tabindex="11"><img src="https://tickertapetimer.github.io/post-images/1646366836553.png" alt="" loading="lazy"></figure>
<p>保存模块</p>
<h2 id="登录选项">登录选项</h2>
<p>UI相关的DLL，找到ribbon（选项卡），可能存在文件名与初始化有关的函数，找到InitializeComponent</p>
<figure data-type="image" tabindex="12"><img src="https://tickertapetimer.github.io/post-images/1646366903516.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="13"><img src="https://tickertapetimer.github.io/post-images/1646366911280.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="14"><img src="https://tickertapetimer.github.io/post-images/1646366916144.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="15"><img src="https://tickertapetimer.github.io/post-images/1646366922357.png" alt="" loading="lazy"></figure>
<p>判断哪个是对的</p>
<figure data-type="image" tabindex="16"><img src="https://tickertapetimer.github.io/post-images/1646366959575.png" alt="" loading="lazy"></figure>
<p>四个UI，第一个不是按钮，第二第三个看参数与登录无关</p>
<figure data-type="image" tabindex="17"><img src="https://tickertapetimer.github.io/post-images/1646366976011.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="18"><img src="https://tickertapetimer.github.io/post-images/1646366981180.png" alt="" loading="lazy"></figure>
<p>最后一个应该是，改最后一个的参数，把size相关的全改为0，直接消失</p>
<figure data-type="image" tabindex="19"><img src="https://tickertapetimer.github.io/post-images/1646367003095.png" alt="" loading="lazy"></figure>
<p>用第二种patch操作，直接编辑方法</p>
<figure data-type="image" tabindex="20"><img src="https://tickertapetimer.github.io/post-images/1646367023958.png" alt="" loading="lazy"></figure>
<p>保存模块</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[康威生命游戏]]></title>
        <id>https://tickertapetimer.github.io/post/HgCQ3On_k/</id>
        <link href="https://tickertapetimer.github.io/post/HgCQ3On_k/">
        </link>
        <updated>2021-08-27T02:35:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="简介">简介</h2>
<p>康威生命游戏（Conway's Game of Life），又称康威生命棋，是英国数学家约翰·何顿·康威在1970年发明的细胞自动机。</p>
<h2 id="规则">规则</h2>
<p>生命游戏中，对于任意细胞，传统规则如下：</p>
<p>每个细胞有两种状态 - 存活或死亡，每个细胞与以自身为中心的周围八格细胞产生互动（如图，黑色为存活，白色为死亡）<br>
当前细胞为存活状态时，当周围的存活细胞低于2个时（不包含2个），该细胞变成死亡状态。（模拟生命数量稀少）<br>
当前细胞为存活状态时，当周围有2个或3个存活细胞时，该细胞保持原样。<br>
当前细胞为存活状态时，当周围有超过3个存活细胞时，该细胞变成死亡状态。（模拟生命数量过多）<br>
当前细胞为死亡状态时，当周围有3个存活细胞时，该细胞变成存活状态。（模拟繁殖）<br>
可以把最初的细胞结构定义为种子，当所有在种子中的细胞同时被以上规则处理后，可以得到第一代细胞图。按规则继续处理当前的细胞图，可以得到下一代的细胞图，周而复始。</p>
<h2 id="趣味">趣味</h2>
<p>在传统的生命游戏中，随着游戏的进行，杂乱无序的细胞会逐渐演化出各种精致、有形的结构；这些结构往往有很好的对称性，而且每一代都在变化形状。一些形状已经锁定，不会逐代变化。有时，一些已经成形的结构会因为一些无序细胞的“入侵”而被破坏。但是形状和秩序经常能从杂乱中产生出来。</p>
<figure data-type="image" tabindex="1"><img src="https://tickertapetimer.github.io/post-images/1630032039689.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://tickertapetimer.github.io/post-images/1630032103202.png" alt="" loading="lazy"></figure>
<p>更为趣味的是，如果将细胞存活或死亡的判定规则更改，那样衍生出来的图案也会发生变化，某种意义上，它暗示着在资源丰富或者匮乏的情况下，生命聚落的生存方式</p>
<h2 id="链接">链接</h2>
<p><a href="https://playgameoflife.com/">康威生命游戏</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[折腾博客有感]]></title>
        <id>https://tickertapetimer.github.io/post/rZqMTU-M_/</id>
        <link href="https://tickertapetimer.github.io/post/rZqMTU-M_/">
        </link>
        <updated>2021-08-21T04:02:06.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前情提要">前情提要</h2>
<p>两周前，我的阿里云服务器被下了挖矿病毒，非常离谱，好像还是爆破了我的SSH密码放进来的，所以我直接修改了SSH端口，且设置为不可使用密码登录。</p>
<p>正因如此，我原来push博客的设置就乱了，需要重新修改，但我当时看到有一个特别帅的博客主题：shell，这个主题首页感觉很帅，于是我想用它作为我博客的新主题。但是，我这个博客是基于hexo的，而这个shell主题是基于hugo的，所以我想了想，不如直接把我的博客迁到hugo得了，于是便有了下面这一段故事。</p>
<p>shell主题：<br>
<img src="https://tickertapetimer.github.io/post-images/1629519722329.png" alt="" loading="lazy"></p>
<h2 id="hexo迁移hugo">hexo迁移hugo</h2>
<p>hexo迁移到hugo呢，我预想到的问题有两个，一个是图片的引用，一个是文章格式的修改。</p>
<p>图片引用很好解决，hugo和hexo的图片引用逻辑虽然不算一样，但是都可以使用相对路径，只要用脚本正则修改一下规范就好了，当然手改也行，就是几十篇博客手改有点累。</p>
<p>解决掉图片问题后，开始着手文章格式修改，都是一些规范问题，百度或者看两边的文档对比一下修改就可以了。</p>
<h3 id="离谱的主题">离谱的主题</h3>
<p>在修改完所有文章后，我开始着手安装使用shell主题，这个时候我发现不对劲了，与hexo完整的配置不同的是，hugo的归档页、分类页，不是自带的，需要自己编辑。当然，有的主题会写好给你，但这个shell主题并不会，你需要自己去写归档页和分类页，归档页可以直接套百度的代码，而分类页则不适用于我这个主题，一番抉择后，我抛弃使用分类页了，主要是我懒得自己写代码了。</p>
<p>但在我一脸兴奋的部署好我的博客时，我又发现了一个问题，这个博客，不适配移动端浏览，就蛮离谱的，它还不是在移动端不方便看，它是直接不能在移动端浏览，你只能看见中间的文字，不能划动去看左右两边的文字。</p>
<p>除了上述问题外，还有一个问题，直接让我再次选择更换博客了，hugo想要部署到服务器，基本也是要git push上去，但是我使用SSH key登录服务器一直失败，所以我只能选择将它部署到GitHub，再用服务器把GitHub的仓库clone下来，这就很麻烦了，要两步，还都得手动，思前想后，我又换了第三个博客系统：gridea。</p>
<h2 id="hugo迁移到gridea">hugo迁移到gridea</h2>
<p>gridea是一个静态博客客户端，可以在上面编辑文章，再通过使用它自带的一键同步功能push上去，这是我非常喜欢的一点，还有一点，gridea可以在全局设置好标签，然后直接给文章贴上去，且不用自己设定文章创建时间，这是我觉得蛮不错的一点。</p>
<p>hugo迁移到gridea，要解决的还是图片格式等内容，gridea使用的是绝对路径，在解决完一系列格式、主题等内容后，我开始将它部署到服务器以及GitHub上，这时我发现了另一个问题。gridea push博客到GitHub上一直不成功，百度后是墙的问题，而gridea又不走我设置的系统代理，所以我找了一个软件，强制gridea走代理，这个软件叫Proxifier。</p>
<p>经过一系列折腾，我终于将我的博客正常部署了，现在写文章可以直接在客户端编辑，然后一键部署，还是挺方便的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ring3注入学习(1)导入表注入]]></title>
        <id>https://tickertapetimer.github.io/post/ring3注入学习(1)导入表注入/</id>
        <link href="https://tickertapetimer.github.io/post/ring3注入学习(1)导入表注入/">
        </link>
        <updated>2021-08-16T09:59:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="原理">原理</h2>
<h3 id="导入表的结构">导入表的结构</h3>
<p>在编程中常常用到“导入函数”(Import functions),导入函数就是被程序调用但其执行代码又不在程序中的函数，这些函数的代码位于一个或者多个DLL中，在调用者程序中只保留一些函数信息，包括函数名及其驻留的DLL名等。</p>
<p>于磁盘上的PE 文件来说，它无法得知这些输入函数在内存中的地址，只有当PE 文件被装入内存后，Windows 加载器才将相关DLL 装入，并将调用输入函数的指令和函数实际所处的地址联系起来。这就是“动态链接”的概念。动态链接是通过PE 文件中定义的“导入表”来完成的，导入表中保存的正是函数名和其驻留的DLL 名等。</p>
<p>导入表由一系列IMAGE_IMPORT_DESCRIPTOR结构体组成：</p>
<figure data-type="image" tabindex="1"><img src="https://tickertapetimer.github.io/post-images/dll%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0(1)%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/image-20210818140915785.png" alt="image-20210818140915785" loading="lazy"></figure>
<p>结构的数量取决于程序要使用的DLL文件的数量，每一个结构对应一个DLL文件</p>
<p>该结构体的定义如下：</p>
<pre><code class="language-c++">struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD   Characteristics; 
        DWORD   OriginalFirstThunk;         
    } DUMMYUNIONNAME;
    DWORD   TimeDateStamp; 
    DWORD   ForwarderChain;         
    DWORD   Name;//导入模块名的RVA
    DWORD   FirstThunk;              
} IMAGE_IMPORT_DESCRIPTOR;
</code></pre>
<p>具体在PE文件中，就像这个样子：</p>
<figure data-type="image" tabindex="2"><img src="https://tickertapetimer.github.io/post-images/dll%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0(1)%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/image-20210818141436232.png" alt="image-20210818141436232" loading="lazy"></figure>
<p>在IMAGE_IMPORT_DESCRIPTOR的结构体的最后面，附带着许多小结构体，里面记录的信息是该导入表的DLL要导入使用的API</p>
<pre><code class="language-c++">typedef struct _IMAGE_IMPORT_BY_NAME {
    WORD    Hint;
    BYTE    Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://tickertapetimer.github.io/post-images/dll%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0(1)%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/image-20210818141729847.png" alt="image-20210818141729847" loading="lazy"></figure>
<p>以上便是导入表的基础结构</p>
<h3 id="导入表的注入">导入表的注入</h3>
<figure data-type="image" tabindex="4"><img src="https://tickertapetimer.github.io/post-images/dll%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0(1)%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/image-20210818142936958.png" alt="image-20210818142936958" loading="lazy"></figure>
<p>由《加密与解密》中得知。Windows装载PE文件时，会检查导入表，将导入表所包含要使用的DLL加载进程序中，这也就产生了一个DLL注入的点，如果将恶意DLL写入导入表中，就可以让程序在运行时调用恶意DLL中的代码，达到DLL注入的效果</p>
<h2 id="实现">实现</h2>
<p>要实现导入表注入，需要把要注入的DLL构造的结构体塞进导入表里，但是由于导入表默认不是在PE文件的最后，所以导入表原来所在的位置不一定有足够大的空间塞入一个新的结构体，这时我们就需要把导入表移动到新的足够大的位置，有两种办法，扩大最后一个节和直接新增一个节，比较方便的方法是选择新增一个节，在新增节后将原导入表放进去，如何在最后写入自己的导入表，再新增8字节的INT和8字节IAT，至于为什么要增加8字节的INT表和8字节的IAT表，可以这样解释：</p>
<figure data-type="image" tabindex="5"><img src="https://tickertapetimer.github.io/post-images/dll%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0(1)%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/t65HBV4.png" alt="iat1" loading="lazy"></figure>
<p>如图，当我们新写入一个IMAGE_IMPORT_DESCRIPTOR结构，我们就需要建立INT和IAT对于该结构的映射，此时就需要扩充IAT和INT表</p>
<p>具体实现步骤如下：</p>
<ol>
<li>找到原导入表</li>
<li>在程序最后开辟一个新节（也可扩大最后一个节）</li>
<li>拷贝原来的导入表到新节中</li>
<li>在新节拷贝的导入表后新增一个导入表</li>
<li>增加8字节的INT表和8字节的IAT表</li>
<li>存储要注入的dll的名称</li>
<li>增加一个_IMAGE_IMPORT_BY_NAME结构，并将函数名称存进结构体第一个变量后的内存中_</li>
<li>将_IMAGE_IMPORT_BY_NAME结构的地址的RVA赋值给INT表和IAT表第一项</li>
<li>将dll名称所在位置的首地址的RVA赋值给新增导入表的Name</li>
<li>修改IMAGE_DATA_DIRECTORY结构的VirtualAddress和Size</li>
</ol>
<h2 id="代码">代码</h2>
<h3 id="dll代码">DLL代码</h3>
<pre><code class="language-c++">// dllmain.cpp : 定义 DLL 应用程序的入口点。
#include &quot;pch.h&quot;


extern &quot;C&quot; __declspec(dllexport) void puts()
{
    MessageBoxA(0, &quot;hi&quot;, &quot;hello&quot;, 0);
    return;
}

BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
                     )
{
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
        puts();
        break;
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}
</code></pre>
<h3 id="注入程序代码">注入程序代码</h3>
<pre><code class="language-c++">#include&lt;Windows.h&gt;
#include&lt;stdio.h&gt;
#define DLLNAMELENGTH 0xE
#define FUNCTIONNAMELENGTH 0xF
#define FUNCTIONNAME &quot;puts&quot;
#define DLLNAME &quot;Dll1.dll&quot;

//获取DOS头
PIMAGE_DOS_HEADER GetDosHeader(_In_ char* pBase) {
	return PIMAGE_DOS_HEADER(pBase);
}

//获取NT头
PIMAGE_NT_HEADERS GetNtHeader(_In_ char* pBase) {
	return PIMAGE_NT_HEADERS(GetDosHeader(pBase)-&gt;e_lfanew + (SIZE_T)pBase);
}

//获取文件头
PIMAGE_FILE_HEADER GetFileHeader(_In_ char* pBase) {
	return &amp;(GetNtHeader(pBase)-&gt;FileHeader);
}

//获取OPT头
PIMAGE_OPTIONAL_HEADER32 GetOptHeader(_In_ char* pBase) {
	return &amp;(GetNtHeader(pBase)-&gt;OptionalHeader);
}

PIMAGE_SECTION_HEADER GetSecByName(_In_ char* pBase, _In_ const char* name) {
	DWORD Secnum = GetFileHeader(pBase)-&gt;NumberOfSections;
	PIMAGE_SECTION_HEADER Section = IMAGE_FIRST_SECTION(GetNtHeader(pBase));
	char buf[10] = { 0 };
	for (DWORD i = 0; i &lt; Secnum; i++) {
		memcpy_s(buf, 8, (char*)Section[i].Name, 8);
		if (!strcmp(buf, name)) {
			return Section + i;
		}
	}
	return nullptr;
}

//获取最后一个区段
PIMAGE_SECTION_HEADER GetLastSec(_In_ char* PeBase) {
	DWORD SecNum = GetFileHeader(PeBase)-&gt;NumberOfSections;
	PIMAGE_SECTION_HEADER FirstSec = IMAGE_FIRST_SECTION(GetNtHeader(PeBase));
	PIMAGE_SECTION_HEADER LastSec = FirstSec + SecNum - 1;
	return LastSec;
}

char* OpenPeFiles(_In_ const char* Path, _Out_opt_ DWORD* nFileSize)
{
	//读文件
	HANDLE hFile = CreateFileA(Path,
		GENERIC_READ,
		FILE_SHARE_READ,
		NULL,
		OPEN_ALWAYS,
		FILE_ATTRIBUTE_NORMAL,
		NULL);
	if (hFile == INVALID_HANDLE_VALUE)
	{
		//printf(&quot;打开文件失败&quot;);
		return NULL;
	}
	DWORD PeSize = GetFileSize(hFile, NULL);
	if (nFileSize)
		*nFileSize = PeSize;
	DWORD ReadSize = 0;
	char* PeBase = new CHAR[PeSize]{ 0 };
	ReadFile(hFile, PeBase, PeSize, &amp;ReadSize, NULL);

	PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)PeBase;
	//检测DOS头和NT头
	if (pDosHeader-&gt;e_magic != IMAGE_DOS_SIGNATURE)
	{
		//printf(&quot;不是PE文件\n&quot;);
		//system(&quot;pause&quot;);
		return NULL;
	}
	PIMAGE_NT_HEADERS pNtHeader = (PIMAGE_NT_HEADERS)(PeBase + pDosHeader-&gt;e_lfanew);
	if (pNtHeader-&gt;Signature != IMAGE_NT_SIGNATURE)
	{
		//printf(&quot;不是PE文件\n&quot;);
		//system(&quot;pause&quot;);
		return NULL;
	}

	CloseHandle(hFile);
	return PeBase;
}

//粒度对齐处理
int AlignMent(_In_ int size, _In_ int alignment) {
	return (size) % (alignment) == 0 ? (size) : ((size) / alignment + 1) * (alignment);
}

//新增节
char* AddSection(_In_ char*&amp; PeBase, _In_ DWORD&amp; PeSize, _In_ const char* Section_name, _In_ const int Section_size)
{
	GetFileHeader(PeBase)-&gt;NumberOfSections++;
	PIMAGE_SECTION_HEADER LastPeSection = GetLastSec(PeBase);

	memcpy(LastPeSection-&gt;Name, Section_name, 8);
	LastPeSection-&gt;Misc.VirtualSize = Section_size;
	LastPeSection-&gt;VirtualAddress = (LastPeSection - 1)-&gt;VirtualAddress + AlignMent((LastPeSection - 1)-&gt;SizeOfRawData, GetOptHeader(PeBase)-&gt;SectionAlignment);
	LastPeSection-&gt;SizeOfRawData = AlignMent(Section_size, GetOptHeader(PeBase)-&gt;FileAlignment);
	LastPeSection-&gt;PointerToRawData = AlignMent(PeSize, GetOptHeader(PeBase)-&gt;FileAlignment);
	LastPeSection-&gt;Characteristics = 0xc0000040;//节表属性设为该值，意为该节表可读可写且包含已初始化的数据

	GetOptHeader(PeBase)-&gt;SizeOfImage = LastPeSection-&gt;VirtualAddress + LastPeSection-&gt;SizeOfRawData;

	int NewSize = LastPeSection-&gt;PointerToRawData + LastPeSection-&gt;SizeOfRawData;

	char* NewPeBase = new char [NewSize] {0};
	//向新缓冲区录入数据
	memcpy(NewPeBase, PeBase, PeSize);
	//缓存区更替
	delete PeBase;
	PeSize = NewSize;
	return NewPeBase;
}

//保存文件
void SaveFile(_In_ const char* path, _In_ const char* data, _In_ int FileSize) {
	HANDLE hFile = CreateFileA(
		path,
		GENERIC_WRITE,
		FILE_SHARE_READ,
		NULL,
		CREATE_ALWAYS,
		FILE_ATTRIBUTE_NORMAL,
		NULL
	);
	DWORD Buf = 0;
	WriteFile(hFile, data, FileSize, &amp;Buf, NULL);
	CloseHandle(hFile);
}

//将RVA的值转换成FOA
LPVOID RvaToFoa(LPVOID pFileBuffer, LPSTR virtualAddress) {
	LPSTR sectionAddress = NULL;//记录距离节头的距离
	LPSTR fileAddress = NULL;//记录文件中的偏移
	PIMAGE_DOS_HEADER pDosHeader = NULL;
	PIMAGE_NT_HEADERS pNTHeader = NULL;
	PIMAGE_FILE_HEADER pPEHeader = NULL;
	PIMAGE_OPTIONAL_HEADER32 pOptionHeader = NULL;
	PIMAGE_SECTION_HEADER pSectionHeader = NULL;

	if (pFileBuffer == NULL) {
		printf(&quot;文件写入内存失败!\n&quot;);
		return NULL;
	}

	pDosHeader = (PIMAGE_DOS_HEADER)pFileBuffer;
	pNTHeader = (PIMAGE_NT_HEADERS)((DWORD)pFileBuffer + pDosHeader-&gt;e_lfanew);
	pPEHeader = (PIMAGE_FILE_HEADER)((DWORD)pNTHeader + 4);
	pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((DWORD)pPEHeader + 20);
	pSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)pOptionHeader + pPEHeader-&gt;SizeOfOptionalHeader);

	if ((DWORD)virtualAddress &lt;= pOptionHeader-&gt;SizeOfHeaders) {
		return virtualAddress;
	}

	for (DWORD i = 1; i &lt;= pPEHeader-&gt;NumberOfSections; i++) {
		if ((DWORD)virtualAddress &lt; pSectionHeader-&gt;VirtualAddress) {
			pSectionHeader--;
			break;
		}
		else if (i == pPEHeader-&gt;NumberOfSections) {
			break;
		}
		else {
			pSectionHeader++;
		}

	}

	//距离该节头的距离
	sectionAddress = virtualAddress - pSectionHeader-&gt;VirtualAddress;
	fileAddress = pSectionHeader-&gt;PointerToRawData + sectionAddress;

	return (LPVOID)fileAddress;
}

//将FOA的值转换成RVA
LPVOID FoaToRva(LPVOID pFileBuffer, LPSTR fileaddress) {
	LPSTR sectionAddress = NULL;//记录距离节头的距离
	LPSTR virtualaddress = NULL;//记录内存中的偏移
	PIMAGE_DOS_HEADER pDosHeader = NULL;
	PIMAGE_NT_HEADERS pNTHeader = NULL;
	PIMAGE_FILE_HEADER pPEHeader = NULL;
	PIMAGE_OPTIONAL_HEADER32 pOptionHeader = NULL;
	PIMAGE_SECTION_HEADER pSectionHeader = NULL;

	if (pFileBuffer == NULL) {
		printf(&quot;文件写入内存失败!\n&quot;);
		return NULL;
	}

	pDosHeader = (PIMAGE_DOS_HEADER)pFileBuffer;
	pNTHeader = (PIMAGE_NT_HEADERS)((DWORD)pFileBuffer + pDosHeader-&gt;e_lfanew);
	pPEHeader = (PIMAGE_FILE_HEADER)((DWORD)pNTHeader + 4);
	pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((DWORD)pPEHeader + 20);
	pSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)pOptionHeader + pPEHeader-&gt;SizeOfOptionalHeader);

	if ((DWORD)fileaddress &lt;= pOptionHeader-&gt;SizeOfHeaders) {
		return fileaddress;
	}

	for (DWORD i = 1; i &lt;= pPEHeader-&gt;NumberOfSections; i++) {
		if ((DWORD)fileaddress &lt; pSectionHeader-&gt;PointerToRawData) {
			pSectionHeader--;
			break;
		}
		else if (i == pPEHeader-&gt;NumberOfSections) {
			break;
		}
		else {
			pSectionHeader++;
		}

	}

	//距离该节头的距离
	sectionAddress = fileaddress - pSectionHeader-&gt;PointerToRawData;
	virtualaddress = pSectionHeader-&gt;VirtualAddress + sectionAddress;

	return (LPVOID)virtualaddress;
}

char* inject_dll(_In_ char*&amp; PeBase, _In_ DWORD&amp; PeSize)
{
	PIMAGE_DATA_DIRECTORY pDataDirectory = NULL;//定位表目录
	PIMAGE_IMPORT_DESCRIPTOR importTableAddress = NULL;//定位导入表的真正位置
	LPVOID returnAddress = NULL;//记录RVAtoFOA的返回值

	//定位到新节的位置和导入表的位置
	pDataDirectory = (PIMAGE_DATA_DIRECTORY)GetOptHeader(PeBase)-&gt;DataDirectory;
	pDataDirectory += 0x1;

	DWORD sectionLength = pDataDirectory-&gt;Size + 0x28 + +0x10 + DLLNAMELENGTH + FUNCTIONNAMELENGTH + 0x2;
	sectionLength = AlignMent(sectionLength, GetOptHeader(PeBase)-&gt;FileAlignment);

	char SecName[] = &quot;.ddjsq&quot;;
	char* NewPeBase = AddSection(PeBase, PeSize, SecName, sectionLength);

	pDataDirectory = (PIMAGE_DATA_DIRECTORY)GetOptHeader(NewPeBase)-&gt;DataDirectory;
	pDataDirectory += 0x1;

	PDWORD pNewSection = (PDWORD)(GetLastSec(NewPeBase)-&gt;PointerToRawData + (DWORD)NewPeBase);
	returnAddress = RvaToFoa(NewPeBase, (LPSTR)pDataDirectory-&gt;VirtualAddress);
	importTableAddress = (PIMAGE_IMPORT_DESCRIPTOR)((DWORD)returnAddress + (DWORD)NewPeBase);

	//复制原导入表，在原导入表后新增一个导入表
	memcpy(pNewSection, importTableAddress, pDataDirectory-&gt;Size);
	importTableAddress = (PIMAGE_IMPORT_DESCRIPTOR)((DWORD)pNewSection + pDataDirectory-&gt;Size - 0x14);

	//增加8字节INT表
	PIMAGE_THUNK_DATA32 pIntTable = (PIMAGE_THUNK_DATA32)((DWORD)importTableAddress + 0x28);//保留20字节的0
	PIMAGE_THUNK_DATA32 repairIntTable = pIntTable;
	pIntTable++;
	pIntTable-&gt;u1.Ordinal = 0x0;
	pIntTable++;

	//增加8字节IAT表
	PIMAGE_THUNK_DATA32 pIatTable = (PIMAGE_THUNK_DATA32)(pIntTable);
	PIMAGE_THUNK_DATA32 repairIatTable = pIatTable;
	pIatTable++;
	pIatTable-&gt;u1.Ordinal = 0x0;
	pIatTable++;

	//分配空间存储DLL名称字符串
	PDWORD dllNameAddress = (PDWORD)pIatTable;
	memcpy(dllNameAddress, DLLNAME, DLLNAMELENGTH);

	//增加IMAGE_IMPORT_BY_NAME 结构
	PIMAGE_IMPORT_BY_NAME functionNameAddress = (PIMAGE_IMPORT_BY_NAME)((DWORD)dllNameAddress + DLLNAMELENGTH);
	PDWORD pFunctionName = (PDWORD)((DWORD)functionNameAddress + 0x2);
	memcpy(pFunctionName, FUNCTIONNAME, FUNCTIONNAMELENGTH);

	//将IMAGE_IMPORT_BY_NAME结构的RVA赋值给INT和IAT表中的第一项
	repairIntTable-&gt;u1.AddressOfData = (DWORD)FoaToRva(NewPeBase, (LPSTR)((DWORD)functionNameAddress - (DWORD)NewPeBase));
	repairIatTable-&gt;u1.AddressOfData = repairIntTable-&gt;u1.Ordinal;

	//修正导入表Name、OriginalFirstThunk、FirstThunk
	importTableAddress-&gt;Name = (DWORD)FoaToRva(NewPeBase, (LPSTR)((DWORD)dllNameAddress - (DWORD)NewPeBase));
	importTableAddress-&gt;OriginalFirstThunk = (DWORD)FoaToRva(NewPeBase, (LPSTR)((DWORD)repairIntTable - (DWORD)NewPeBase));
	importTableAddress-&gt;FirstThunk = (DWORD)FoaToRva(NewPeBase, (LPSTR)((DWORD)repairIatTable - (DWORD)NewPeBase));

	//修正IMAGE_DATA_DIRECTORY结构的VirtualAddress和Size
	pDataDirectory-&gt;VirtualAddress = (DWORD)FoaToRva(NewPeBase, (LPSTR)((DWORD)pNewSection - (DWORD)NewPeBase));
	pDataDirectory-&gt;Size += 0x14;

	return NewPeBase;
}

int main()
{
	char path[] = &quot;路径&quot;;
	DWORD pesize;
	char* PeBase = OpenPeFiles(path, &amp;pesize);
	if (!PeBase)
	{
		printf(&quot;wrong&quot;);
		return 0;
	}
	char* NewPeBase = inject_dll(PeBase, pesize);
	SaveFile(&quot;路径&quot;, NewPeBase, pesize);
}
</code></pre>
<h3 id="运行结果">运行结果</h3>
<p>注入前</p>
<figure data-type="image" tabindex="6"><img src="https://tickertapetimer.github.io/post-images/dll%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0(1)%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/image-20210818201529967.png" alt="image-20210818201529967" loading="lazy"></figure>
<p>注入后</p>
<figure data-type="image" tabindex="7"><img src="https://tickertapetimer.github.io/post-images/dll%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0(1)%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/image-20210818201600590.png" alt="image-20210818201600590" loading="lazy"></figure>
<p>运行时</p>
<figure data-type="image" tabindex="8"><img src="https://tickertapetimer.github.io/post-images/dll%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0(1)%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/image-20210818201757468.png" alt="image-20210818201757468" loading="lazy"></figure>
<h2 id="防范手段">防范手段</h2>
<p>由于是静态注入，直接修改了exe文件，所以可使用校验的方式去检测有无被注入</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows挖矿样本分析]]></title>
        <id>https://tickertapetimer.github.io/post/一个Windows挖矿样本/</id>
        <link href="https://tickertapetimer.github.io/post/一个Windows挖矿样本/">
        </link>
        <updated>2021-08-08T08:45:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>又搞到一个挖矿样本，是Windows的，看看里面有啥</p>
<h2 id="云沙箱">云沙箱</h2>
<p>先丢微步云沙箱分析一手</p>
<figure data-type="image" tabindex="1"><img src="https://tickertapetimer.github.io/post-images/1629434951109.png" alt="" loading="lazy"></figure>
<p>沙箱检测有壳</p>
<figure data-type="image" tabindex="2"><img src="https://tickertapetimer.github.io/post-images/1629434963434.png" alt="" loading="lazy"></figure>
<p>拖exeinfo看看</p>
<figure data-type="image" tabindex="3"><img src="https://tickertapetimer.github.io/post-images/%E4%B8%80%E4%B8%AAWindows%E6%8C%96%E7%9F%BF%E6%A0%B7%E6%9C%AC/image-20210808164909614.png" alt="image-20210808164909614" loading="lazy"></figure>
<p>好嘛，是个大壳，先放一边，接着看沙箱检测结果</p>
<figure data-type="image" tabindex="4"><img src="https://tickertapetimer.github.io/post-images/%E4%B8%80%E4%B8%AAWindows%E6%8C%96%E7%9F%BF%E6%A0%B7%E6%9C%AC/image-20210808165146054.png" alt="image-20210808165146054" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://tickertapetimer.github.io/post-images/1629434981282.png" alt="" loading="lazy"></figure>
<p>矿池啊，那没事了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[防御病毒经验]]></title>
        <id>https://tickertapetimer.github.io/post/服务器防御病毒经验/</id>
        <link href="https://tickertapetimer.github.io/post/服务器防御病毒经验/">
        </link>
        <updated>2021-08-06T11:22:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>今天打比赛，要用到我的服务器，所以我时隔一个多月，再一次打开宝塔，不看不知道，一看吓一跳，好家伙，CPU直接拉满，看一眼监控，连续拉满十多天了，这波被白嫖给人挖了两星期的矿，而在删挖矿病毒的时候，我也学到了一些基本的挖矿病毒排查应对的技巧，记录一下</p>
<h2 id="基础操作">基础操作</h2>
<h3 id="列出进程">列出进程</h3>
<p>对于一般的挖矿病毒，直接<code>top</code>，就可以看到它排在最上面，但是对于一些高级病毒，它可能会有相对应的隐藏操作，比如说修改你的top命令的源代码，让你不能用top找到它，这个时候就要用到一些第三方工具，比如说htop之类的</p>
<h3 id="删除进程一般是没用的">删除进程（一般是没用的</h3>
<p>删除进程<code>killall -9 &lt;name&gt;</code></p>
<p>一般来说，找到进程之后，就是删除进程，然后删除文件，但对于挖矿病毒来说，它们基本上都很难删掉，因为它们有守护进程</p>
<h4 id="守护进程">守护进程</h4>
<p>守护进程(daemon)是生存期长的一种进程,没有控制终端.它们常常在系统引导装入时启动,仅在系统关闭时才终止.UNIX系统有很多守护进程,守护进程程序的名称通常以字母“d”结尾:例如,syslogd 就是指管理系统日志的守护进程.</p>
<p>守护进程的存在，使得我们在删除主进程的时候，它会再次唤起主进程，接着挖</p>
<p>那把守护进程删了呢？这有用吗？</p>
<p>答案大多数时候也是没有的，因为它可能还有一层保护，计划任务</p>
<h3 id="计划任务">计划任务</h3>
<p>Linux查看计划任务的命令是<code>crontab -u &lt;用户名&gt;</code>,该命令可以显示出当前用户或者指定用户的计划任务，想要删除病毒，就必须要将计划任务删干净，<code>crontab -e</code>是负责删除计划任务的命令</p>
<p>删除了计划任务、守护进程、主进程后，基本就算成功删除这个病毒了</p>
<h2 id="花操作">花操作</h2>
<h3 id="病毒自删">病毒自删</h3>
<p>一些高级的病毒，会在病毒启动后，把文件给删掉，这个时候你去看对应的进程对应的文件，会发现它已经删掉了</p>
<p>就像这样</p>
<figure data-type="image" tabindex="1"><img src="https://tickertapetimer.github.io/post-images/1629435064302.png" alt="" loading="lazy"></figure>
<p>这就导致删除文件不能防御病毒，只能通过删除进程去杀毒</p>
<h3 id="定时任务有副本">定时任务有副本</h3>
<p>对于一些更高级的病毒，删除定时任务的操作已经不能完全将它们删掉，因为它们在渗透进服务器启动病毒的时候，可能会将定时任务复制出来一个副本，用那个副本去定时刷新转移它自身，再删除自己，导致清除难度加大</p>
<p>但这种操作有一个小漏洞可以利用，那就是它们复制转移的文件大小都是固定的，只要将它的大小用<code>du -b &lt;定时任务文件路径&gt;</code>记录下来，用<code>find / -size &lt;文件大小&gt;c -type f -exec rm {} \;</code>搜索全盘，一把梭全删了就可以，删除之后，就可以着手删除主进程和守护进程</p>
<h2 id="ld_preload隐藏进程">LD_PRELOAD隐藏进程</h2>
<p>这个病毒操作还没见到，但是查资料看到这个操作，记录一下</p>
<p><a href="https://www.freebuf.com/articles/web/271281.html">「应急响应：记一次花样贼多的挖矿病毒」</a></p>
<figure data-type="image" tabindex="2"><img src="https://tickertapetimer.github.io/post-images/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E5%BE%A1%E7%97%85%E6%AF%92%E7%BB%8F%E9%AA%8C/3154387877.png" alt="截屏" loading="lazy"></figure>
<h1 id="windows挖矿病毒">Windows挖矿病毒</h1>
<p>对于Windows的挖矿病毒，一般都可以用杀毒软件直接粉碎掉，但是如果没有杀毒软件，且防火墙检测不到，那就要手动删了，一些病毒会放置在C盘，且你没有办法删除，因为它在被进程占用，这个时候，可以通过更改文件名的方法删除它，将其更改后缀，然后结束进程，这样程序就不能再次启动，然后就可以删除病毒文件了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux挖矿病毒分析]]></title>
        <id>https://tickertapetimer.github.io/post/一个Linux挖矿样本分析/</id>
        <link href="https://tickertapetimer.github.io/post/一个Linux挖矿样本分析/">
        </link>
        <updated>2021-08-06T11:21:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>给服务器清除挖矿病毒的时候，顺手把定时任务下下来了，逆向一手看看</p>
<h2 id="初步分析">初步分析</h2>
<h3 id="脱壳">脱壳</h3>
<p>是64位elf文件，拖进IDA，有壳</p>
<figure data-type="image" tabindex="1"><img src="https://tickertapetimer.github.io/post-images/1629435160039.png" alt="" loading="lazy"></figure>
<p>看起来是压缩壳，尝试一手upx</p>
<figure data-type="image" tabindex="2"><img src="https://tickertapetimer.github.io/post-images/%E9%80%86%E5%90%91%E6%8C%96%E7%9F%BF%E7%97%85%E6%AF%92/image-20210806203033513.png" alt="image-20210806203033513" loading="lazy"></figure>
<p>还真是，彳亍吧</p>
<h3 id="逆向分析">逆向分析</h3>
<p>再次拖进IDA</p>
<p>进入主函数</p>
<figure data-type="image" tabindex="3"><img src="https://tickertapetimer.github.io/post-images/1629435179232.png" alt="" loading="lazy"></figure>
<p>一连串的CPUID汇编指令，且每一串的指令的初始值（即指令上方的_RAX参数）都不同</p>
<p>三个CPUID指令的初始值分别为0、1、7</p>
<p>他们分别返回的值为：</p>
<ol>
<li>
<p>EAX=0：获取CPU的Vendor ID</p>
<p>Vendor ID是制造商的标识，用下面的方法执行该功能：</p>
<p>执行CPUID指令后，AX中返回的内容前面已经说过了，返回的Vendor ID固定为12个ASCII字符依次存放在EBX、EDX、ECX中，对于Intel的CPU，返回的字符串永远是：GenuineIntel</p>
</li>
<li>
<p>EAX=1：处理器签名（Processor Signiture）和功能（Feature）位</p>
<p>执行完成后，处理器签名放在EAX中，功能位及其它杂七杂八的内容分别放在EBX、ECX和EDX中</p>
<p>通过处理器签名，可以确定CPU的具体型号</p>
</li>
<li></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用PEB寻找kernel32.dll的基地址]]></title>
        <id>https://tickertapetimer.github.io/post/利用PEB寻找kernel32.dll的基地址/</id>
        <link href="https://tickertapetimer.github.io/post/利用PEB寻找kernel32.dll的基地址/">
        </link>
        <updated>2021-06-28T07:16:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>最近在尝试入门免杀，于是打算开始学习一手shellcode编写，而想要运行shellcode，就必须要明白shellcode的实现原理。</p>
<h3 id="shellcode">shellcode</h3>
<p>shellcode是一段独立于正常代码的数据，甚至可以把它放进数组里，然后去call它，这个特点既提高了它的灵活性，也加大了编写的难度。</p>
<p>因为shellcode只是一段二进制数据，所以它没有调用DLL获取api的简单操作，想要让shellcode在运行时可以使用kernel32.dll里面的api，我们就需要使用PEB，在说PEB前，我们需要先明白TEB</p>
<h3 id="teb">TEB</h3>
<p>TEB对应的全称是Thread Environment Block ，直译过来是线程环绕块。<br>
TEB结构体存储了线程相关的一些关键信息。<br>
在介绍TEB之前，先简单介绍一下进程和线程的概念。<br>
简单来说，进程可以理解为一个程序，比如启动微信，启动cmd.exe都是启动了一个进程。<br>
线程在进程内部，可以理解为真正干活的东西。一个进程至少要完成一个任务，所以一个进程至少有一个线程。当然一个进程可以有很多个线程，这些线程可以是顺序执行的，也可以是并发执行的（多线程）<br>
线程是程序执行的最小单元。<br>
系统会在TEB中保存线程的一些相关数据。TEB位于用户地址空间，比PEB所在地址低。<br>
进程中的每一个线程都有属于自己的一个TEB，进程中的所有TEB都以堆栈的方式存放在0x7FFDE000开始的线性内存中，每个TEB的大小为4kb。<br>
所以在用户模式下，当前线程的TEB拥有4kb的空间，可以通过CPU的FS寄存器来访问该段。<br>
TEB的起始地址一般是FS:[0]<br>
在windbg中可以使用$thread取得TEB的地址。</p>
<h3 id="peb">PEB</h3>
<p>PEB全称是Process Environment Block 进程环境块。<br>
通过上面的介绍已经说了每个线程都有自己的TEB，其实每个进程也有自己的PEB信息。<br>
PEB也存放在用户态的地址空间。<br>
在以前的操作系统中，PEB的默认地址在0x7FFDF000处。<br>
PEB的地址计算有两种：<br>
1 通过EPROCESS偏移0x1b0得到，但是EPROCESS是系统地址空间，访问EPROCESS需要R0的权限<br>
2 通过TEB结构偏移0x30获取PEB<br>
之前已经讲过，通过FS:[0] 可以获取到当前TEB 的起始地址<br>
所以通过fs:[0x30] 就可以获取到PEB的地址</p>
]]></content>
    </entry>
</feed>